import app
import common
import gui
import logging
import logic
import traveller
import typing
from PyQt5 import QtWidgets, QtCore, QtGui

_WelcomeMessage = """
    <html>
    <p>The Cargo Manifest window takes Trade Options created by the trading engine for speculative
    or available cargo and generates Cargo Manifests that would make optimal use of available funds
    and cargo space.</p>
    <p>Unlike the Trade Options generated by the trading engine, where each option is for a single
    type of Trade Good and logistics costs are applied for each one. Cargo Manifests can contain
    multiple types of Trade Good and logistics costs are only applied once for the manifest as a
    whole.</p>
    </html>
"""

class CargoManifestDialog(gui.DialogEx):
    _AverageCaseTradeOptionColumns = [
        gui.TradeOptionsTable.ColumnType.TradeGood,
        gui.TradeOptionsTable.ColumnType.AverageGrossProfit,
        gui.TradeOptionsTable.ColumnType.AverageProfitPerTon,
        gui.TradeOptionsTable.ColumnType.AveragePurchasePricePerTon,
        gui.TradeOptionsTable.ColumnType.AverageSalePricePerTon,
        gui.TradeOptionsTable.ColumnType.AverageQuantity
    ]
    _WorstCaseTradeOptionColumns = [
        gui.TradeOptionsTable.ColumnType.TradeGood,
        gui.TradeOptionsTable.ColumnType.WorstGrossProfit,
        gui.TradeOptionsTable.ColumnType.WorstProfitPerTon,
        gui.TradeOptionsTable.ColumnType.WorstPurchasePricePerTon,
        gui.TradeOptionsTable.ColumnType.WorstSalePricePerTon,
        gui.TradeOptionsTable.ColumnType.WorstQuantity
    ]
    _BestCaseTradeOptionColumns = [
        gui.TradeOptionsTable.ColumnType.TradeGood,
        gui.TradeOptionsTable.ColumnType.BestGrossProfit,
        gui.TradeOptionsTable.ColumnType.BestProfitPerTon,
        gui.TradeOptionsTable.ColumnType.BestPurchasePricePerTon,
        gui.TradeOptionsTable.ColumnType.BestSalePricePerTon,
        gui.TradeOptionsTable.ColumnType.BestQuantity
    ]

    def __init__(
            self,
            availableFunds: int,
            freeCargoSpace: int,
            tradeOptions: typing.Iterable[logic.TradeOption],
            speculativePurchase: bool = False,
            parent: typing.Optional[QtWidgets.QWidget] = None
            ) -> None:
        super().__init__(
            title='Cargo Manifest',
            configSection='CargoManifestDialog',
            parent=parent)

        self._availableFunds = availableFunds
        self._freeCargoSpace = freeCargoSpace
        self._tradeOptions = tradeOptions

        self._hexTooltipProvider = gui.HexTooltipProvider(
            milieu=app.Config.instance().value(option=app.ConfigOption.Milieu),
            rules=app.Config.instance().value(option=app.ConfigOption.Rules),
            showImages=app.Config.instance().value(option=app.ConfigOption.ShowToolTipImages),
            mapStyle=app.Config.instance().value(option=app.ConfigOption.MapStyle),
            mapOptions=app.Config.instance().value(option=app.ConfigOption.MapOptions),
            worldTagging=app.Config.instance().value(option=app.ConfigOption.WorldTagging),
            taggingColours=app.Config.instance().value(option=app.ConfigOption.TaggingColours))

        self._setupConfigurationControls(speculativePurchase)
        self._setupManifestControls()
        self._setupActionControls(speculativePurchase)

        dialogLayout = QtWidgets.QVBoxLayout()
        dialogLayout.addWidget(self._configurationGroupBox)
        dialogLayout.addWidget(self._cargoManifestGroupBox)
        dialogLayout.addLayout(self._buttonLayout)

        self.setLayout(dialogLayout)
        self.showMaximizeButton()
        self.resize(800, 600)

        # Make dialog only modal to this window that opened it otherwise it's
        # not possible to pop up world info or map windows from inside the
        # dialog
        self.setWindowModality(QtCore.Qt.WindowModality.WindowModal)

        self._generateCargoManifests()

        app.Config.instance().configChanged.connect(self._appConfigChanged)

    def isPurchaseSelectedChecked(self) -> bool:
        if not self._purchaseSelectedCheckBox:
            return False
        return self._purchaseSelectedCheckBox.isChecked()

    def selectedCargoManifest(self) -> logic.CargoManifest:
        return self._cargoManifestTable.currentCargoManifest()

    def firstShowEvent(self, e: QtGui.QShowEvent) -> None:
        QtCore.QTimer.singleShot(0, self._showWelcomeMessage)
        super().firstShowEvent(e)

    def closeEvent(self, event: QtGui.QCloseEvent):
        app.Config.instance().configChanged.disconnect(self._appConfigChanged)
        return super().closeEvent(event)

    def loadSettings(self) -> None:
        super().loadSettings()

        self._settings.beginGroup(self._configSection)

        storedValue = gui.safeLoadSetting(
            settings=self._settings,
            key='PurchaseLogicState',
            type=QtCore.QByteArray)
        if storedValue:
            self._purchaseLogicComboBox.restoreState(storedValue)

        storedValue = gui.safeLoadSetting(
            settings=self._settings,
            key='LogisticsLogicState',
            type=QtCore.QByteArray)
        if storedValue:
            self._logisticsLogicComboBox.restoreState(storedValue)

        storedValue = gui.safeLoadSetting(
            settings=self._settings,
            key='CargoManifestDisplayModeState',
            type=QtCore.QByteArray)
        if storedValue:
            self._cargoManifestDisplayModeTabs.restoreState(storedValue)

        storedValue = gui.safeLoadSetting(
            settings=self._settings,
            key='CargoManifestTableState',
            type=QtCore.QByteArray)
        if storedValue:
            self._cargoManifestTable.restoreState(storedValue)

        storedValue = gui.safeLoadSetting(
            settings=self._settings,
            key='CargoBreakdownTableState',
            type=QtCore.QByteArray)
        if storedValue:
            self._cargoBreakdownTable.restoreState(storedValue)

        storedValue = gui.safeLoadSetting(
            settings=self._settings,
            key='CargoManifestSplitterState',
            type=QtCore.QByteArray)
        if storedValue:
            self._cargoManifestSplitter.restoreState(storedValue)

        self._settings.endGroup()

    def saveSettings(self) -> None:
        self._settings.beginGroup(self._configSection)

        self._settings.setValue('PurchaseLogicState', self._purchaseLogicComboBox.saveState())
        self._settings.setValue('LogisticsLogicState', self._logisticsLogicComboBox.saveState())
        self._settings.setValue('CargoManifestDisplayModeState', self._cargoManifestDisplayModeTabs.saveState())
        self._settings.setValue('CargoManifestTableState', self._cargoManifestTable.saveState())
        self._settings.setValue('CargoBreakdownTableState', self._cargoBreakdownTable.saveState())
        self._settings.setValue('CargoManifestSplitterState', self._cargoManifestSplitter.saveState())

        self._settings.endGroup()

        super().saveSettings()

    def _setupConfigurationControls(
            self,
            speculativePurchase: bool
            ) -> None:
        self._purchaseLogicComboBox = gui.RollOutcomeComboBox(
            value=logic.RollOutcome.AverageCase)
        self._purchaseLogicComboBox.activated.connect(self._logicSelectionChanged)
        self._purchaseLogicComboBox.setToolTip(
            gui.createStringToolTip(
                '<p>In order to create a cargo manifest from speculative cargo, the system ' \
                'must be told which purchase price and availability it should base its ' \
                'calculations on. This lets you choose if it should be based on the values ' \
                'from average, worst or best case dice rolls. This will determine how much ' \
                'cargo the calculations will expect you to be able to buy.</p>' \
                '<p>It\'s recommended to leave this set to average case. If you were to roll ' \
                'significantly below average you\'d walk away from the deal rather than buy ' \
                'at massively inflated prices.</p>',
                escape=False))
        if not speculativePurchase:
            # Selecting the purchase logic only makes sense when using speculative purchase price
            # and availability
            self._purchaseLogicComboBox.hide()

        # Defaulting logistics logic to worst case is the safe option as it avoids purchasing so
        # much you risk running out of funds on route
        self._logisticsLogicComboBox = gui.RollOutcomeComboBox(
            value=logic.RollOutcome.WorstCase)
        self._logisticsLogicComboBox.activated.connect(self._logicSelectionChanged)
        self._logisticsLogicComboBox.setToolTip(
            gui.createStringToolTip(
                '<p>In order to create a cargo manifest the system must be told which logistics ' \
                'costs it should base its calculations on. This lets you choose if it should ' \
                'be based on the values from average, worst or best case dice rolls. This will ' \
                'determine how much of your available funds the system will allocate for cargo. ' \
                'This is done to prevent there being insufficient funds left to travel to the ' \
                'sale world once the cargo has been purchased.</p>' \
                '<p>Using worst case logistics costs is recommended as it avoids the risk of running ' \
                'out of funds en route due to bad dice rolls.</p>',
                escape=False))

        groupLayout = QtWidgets.QHBoxLayout()
        if speculativePurchase:
            groupLayout.addLayout(gui.createLabelledWidgetLayout(
                'Purchase Logic:',
                self._purchaseLogicComboBox))
        groupLayout.addLayout(gui.createLabelledWidgetLayout(
            'Logistics Logic:',
            self._logisticsLogicComboBox))
        groupLayout.addStretch(1)

        self._configurationGroupBox = QtWidgets.QGroupBox('Configuration')
        self._configurationGroupBox.setLayout(groupLayout)

    def _setupManifestControls(self):
        outcomeColours = app.Config.instance().value(option=app.ConfigOption.OutcomeColours)
        worldTagging = app.Config.instance().value(option=app.ConfigOption.WorldTagging)
        taggingColours = app.Config.instance().value(option=app.ConfigOption.TaggingColours)

        self._cargoManifestDisplayModeTabs = gui.CalculationModeTabBar()
        self._cargoManifestDisplayModeTabs.currentChanged.connect(
            self._cargoManifestDisplayModeChanged)

        self._cargoManifestTable = gui.CargoManifestTable(
            outcomeColours=outcomeColours,
            worldTagging=worldTagging,
            taggingColours=taggingColours)
        self._cargoManifestTable.setHexTooltipProvider(
            provider=self._hexTooltipProvider)
        self._cargoManifestTable.setActiveColumns(self._cargoManifestColumns())
        self._cargoManifestTable.sortByColumnHeader(
            self._cargoManifestDefaultSortColumn(),
            QtCore.Qt.SortOrder.DescendingOrder)
        self._cargoManifestTable.selectionModel().selectionChanged.connect(
            self._cargoManifestTableSelectionChanged)
        self._cargoManifestTable.setSelectionMode(
            QtWidgets.QAbstractItemView.SelectionMode.SingleSelection)

        self._cargoBreakdownTable = gui.TradeOptionsTable(
            outcomeColours=outcomeColours,
            worldTagging=worldTagging,
            taggingColours=taggingColours)
        self._cargoBreakdownTable.setHexTooltipProvider(
            provider=self._hexTooltipProvider)
        self._cargoBreakdownTable.setActiveColumns(self._cargoBreakdownColumns())
        self._cargoBreakdownTable.sortByColumnHeader(
            self._cargoBreakdownDefaultSortColumn(),
            QtCore.Qt.SortOrder.DescendingOrder)

        self._cargoManifestSplitter = QtWidgets.QSplitter(
            QtCore.Qt.Orientation.Vertical)
        self._cargoManifestSplitter.addWidget(self._cargoManifestTable)
        self._cargoManifestSplitter.addWidget(self._cargoBreakdownTable)

        groupLayout = QtWidgets.QVBoxLayout()
        groupLayout.setSpacing(0)
        groupLayout.addWidget(self._cargoManifestDisplayModeTabs)
        groupLayout.addWidget(self._cargoManifestSplitter)

        self._cargoManifestGroupBox = QtWidgets.QGroupBox('Cargo Manifests')
        self._cargoManifestGroupBox.setLayout(groupLayout)

    def _setupActionControls(
            self,
            speculativePurchase: bool
            ) -> None:
        self._purchaseSelectedCheckBox = gui.CheckBoxEx(
            'Purchase the selected cargo manifest')
        if speculativePurchase:
            # Purchasing the cargo only makes sense when the purchase price and availability are known
            self._purchaseSelectedCheckBox.hide()

        self._closeButton = QtWidgets.QPushButton('Close')
        self._closeButton.setDefault(True)
        self._closeButton.clicked.connect(self.close)

        self._buttonLayout = QtWidgets.QHBoxLayout()
        self._buttonLayout.addStretch()
        self._buttonLayout.addWidget(self._purchaseSelectedCheckBox)
        self._buttonLayout.addWidget(self._closeButton)

    def _appConfigChanged(
            self,
            option: app.ConfigOption,
            oldValue: typing.Any,
            newValue: typing.Any
            ) -> None:
        if option is app.ConfigOption.Milieu:
            self._hexTooltipProvider.setMilieu(milieu=newValue)
        elif option is app.ConfigOption.Rules:
            self._hexTooltipProvider.setRules(rules=newValue)
        elif option is app.ConfigOption.MapStyle:
            self._hexTooltipProvider.setMapStyle(style=newValue)
        elif option is app.ConfigOption.MapOptions:
            self._hexTooltipProvider.setMapOptions(options=newValue)
        elif option is app.ConfigOption.ShowToolTipImages:
            self._hexTooltipProvider.setShowImages(show=newValue)
        elif option is app.ConfigOption.OutcomeColours:
            self._cargoManifestTable.setOutcomeColours(colours=newValue)
            self._cargoBreakdownTable.setOutcomeColours(colours=newValue)
        elif option is app.ConfigOption.WorldTagging:
            self._hexTooltipProvider.setWorldTagging(tagging=newValue)
            self._cargoManifestTable.setWorldTagging(tagging=newValue)
            self._cargoBreakdownTable.setWorldTagging(tagging=newValue)
        elif option is app.ConfigOption.TaggingColours:
            self._hexTooltipProvider.setTaggingColours(colours=newValue)
            self._cargoManifestTable.setTaggingColours(colours=newValue)
            self._cargoBreakdownTable.setTaggingColours(colours=newValue)

    def _showWorldDetails(
            self,
            worlds: typing.Iterable[traveller.World]
            ) -> None:
        detailsWindow = gui.WindowManager.instance().showHexDetailsWindow()
        detailsWindow.addHexes(hexes=[world.hex() for world in worlds])

    def _cargoManifestColumns(self) -> typing.List[gui.CargoManifestTable.ColumnType]:
        calculationMode = self._cargoManifestDisplayModeTabs.currentCalculationMode()
        if calculationMode == gui.CalculationModeTabBar.CalculationMode.AverageCase:
            return gui.CargoManifestTable.AverageCaseColumns
        elif calculationMode == gui.CalculationModeTabBar.CalculationMode.WorstCase:
            return gui.CargoManifestTable.WorstCaseColumns
        elif calculationMode == gui.CalculationModeTabBar.CalculationMode.BestCase:
            return gui.CargoManifestTable.BestCaseColumns
        else:
            assert(False) # I missed a case

    def _cargoManifestDefaultSortColumn(self) -> gui.CargoManifestTable.ColumnType:
        calculationMode = self._cargoManifestDisplayModeTabs.currentCalculationMode()
        if calculationMode == gui.CalculationModeTabBar.CalculationMode.AverageCase:
            return gui.CargoManifestTable.ColumnType.AverageNetProfit
        elif calculationMode == gui.CalculationModeTabBar.CalculationMode.WorstCase:
            return gui.CargoManifestTable.ColumnType.WorstNetProfit
        elif calculationMode == gui.CalculationModeTabBar.CalculationMode.BestCase:
            return gui.CargoManifestTable.ColumnType.BestNetProfit
        else:
            assert(False) # I missed a case

    def _cargoBreakdownColumns(self) -> typing.List[gui.TradeOptionsTable.ColumnType]:
        calculationMode = self._cargoManifestDisplayModeTabs.currentCalculationMode()
        if calculationMode == gui.CalculationModeTabBar.CalculationMode.AverageCase:
            return CargoManifestDialog._AverageCaseTradeOptionColumns
        elif calculationMode == gui.CalculationModeTabBar.CalculationMode.WorstCase:
            return CargoManifestDialog._WorstCaseTradeOptionColumns
        elif calculationMode == gui.CalculationModeTabBar.CalculationMode.BestCase:
            return CargoManifestDialog._BestCaseTradeOptionColumns
        else:
            assert(False) # I missed a case

    def _cargoBreakdownDefaultSortColumn(self) -> gui.TradeOptionsTable.ColumnType:
        calculationMode = self._cargoManifestDisplayModeTabs.currentCalculationMode()
        if calculationMode == gui.CalculationModeTabBar.CalculationMode.AverageCase:
            return gui.TradeOptionsTable.ColumnType.AverageGrossProfit
        elif calculationMode == gui.CalculationModeTabBar.CalculationMode.WorstCase:
            return gui.TradeOptionsTable.ColumnType.WorstGrossProfit
        elif calculationMode == gui.CalculationModeTabBar.CalculationMode.BestCase:
            return gui.TradeOptionsTable.ColumnType.BestGrossProfit
        else:
            assert(False) # I missed a case

    def _showCalculations(
            self,
            calculation: typing.Union[common.ScalarCalculation, common.RangeCalculation]
            ) -> None:
        try:
            calculationWindow = gui.WindowManager.instance().showCalculationWindow()
            calculationWindow.showCalculation(calculation=calculation)
        except Exception as ex:
            message = 'Failed to show calculations'
            logging.error(message, exc_info=ex)
            gui.MessageBoxEx.critical(
                parent=self,
                text=message,
                exception=ex)

    def _showJumpRouteOnMap(
            self,
            jumpRoute: logic.JumpRoute
            ) -> None:
        try:
            mapWindow = gui.WindowManager.instance().showUniverseMapWindow()
            mapWindow.clearOverlays()
            mapWindow.setJumpRoute(jumpRoute=jumpRoute)
        except Exception as ex:
            message = 'Failed to show jump route on map'
            logging.error(message, exc_info=ex)
            gui.MessageBoxEx.critical(
                parent=self,
                text=message,
                exception=ex)

    def _showWorldsOnMap(
            self,
            worlds: typing.Iterable[traveller.World]
            ) -> None:
        hexes = [world.hex() for world in worlds]
        try:
            mapWindow = gui.WindowManager.instance().showUniverseMapWindow()
            mapWindow.clearOverlays()
            mapWindow.highlightHexes(hexes=hexes)
        except Exception as ex:
            message = 'Failed to show world(s) on map'
            logging.error(message, exc_info=ex)
            gui.MessageBoxEx.critical(
                parent=self,
                text=message,
                exception=ex)

    def _generateCargoManifests(self) -> None:
        self._cargoManifestTable.removeAllRows()

        # If the purchase logic combo box isn't shown then it means we're using known
        # purchase price and availability. In this case just specify average purchase
        # logic but it shouldn't matter
        probabilityLogic = self._purchaseLogicComboBox.currentCase() if self._purchaseLogicComboBox.isEnabled() else logic.RollOutcome.AverageCase

        try:
            cargoManifests = logic.generateCargoManifests(
                availableFunds=self._availableFunds,
                shipCargoCapacity=self._freeCargoSpace,
                tradeOptions=self._tradeOptions,
                purchaseLogic=probabilityLogic,
                logisticsLogic=self._logisticsLogicComboBox.currentCase())
        except Exception as ex:
            message = 'Failed to generate cargo manifest'
            logging.error(message, exc_info=ex)
            gui.MessageBoxEx.critical(
                parent=self,
                text=message,
                exception=ex)
            return

        if not cargoManifests:
            gui.MessageBoxEx.critical(
                parent=self,
                text='No affordable cargo manifests found.')
            return

        for cargoManifest in cargoManifests:
            self._cargoManifestTable.addCargoManifest(cargoManifest)

    def _logicSelectionChanged(self, index: int) -> None:
        self._generateCargoManifests()

    def _cargoManifestDisplayModeChanged(self, index: int) -> None:
        self._cargoManifestTable.setActiveColumns(self._cargoManifestColumns())
        self._cargoBreakdownTable.setActiveColumns(self._cargoBreakdownColumns())

    def _cargoManifestTableSelectionChanged(self) -> None:
        self._cargoBreakdownTable.removeAllRows()

        cargoManifest = self._cargoManifestTable.currentCargoManifest()
        if not cargoManifest:
            return

        for tradeOption in cargoManifest.tradeOptions():
            self._cargoBreakdownTable.addTradeOption(tradeOption)

    def _showWelcomeMessage(self) -> None:
        message = gui.InfoDialog(
            parent=self,
            title=self.windowTitle(),
            html=_WelcomeMessage,
            noShowAgainId='CargoManifestWelcome')
        message.exec()
